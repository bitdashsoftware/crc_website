---
import type { CommunityEntry } from "@/types";
import HeroLayoutWithHTML from "@components/common/HeroLayoutWithHTML.astro";
import { getEntry, getCollection } from "astro:content";
import runningGroupHero from "@assets/hero/running-group-we-support-hero.jpg";

const entry = (await getEntry("community", "runner-stories")) as CommunityEntry;

// Get all runner story entries
const runnerStories = await getCollection("community", ({ data }) => {
  return data.pronouns; // Only get entries that have pronouns field
});
---

<HeroLayoutWithHTML 
  title={entry.data.title}
  description="Stories that inspire, motivate, and connect our community of women runners"
  heroImage={runningGroupHero}
  heroImageAlt="Runner Stories Hero"
  contentClass="content-beige"
  heroTextClass="text-white"
  heroOverlayOpacity={50}
  heroMinHeight="min-h-[60vh]"
>
  <!-- Introduction Section -->
  <div class="max-w-4xl mx-auto text-center mb-16">
    <h2 class="text-3xl font-bold mb-6">Stories That Inspire</h2>
    <p class="text-lg leading-relaxed">
      Confluence Running Collective celebrates women runners at every stage—whether they’re exploring running for the first time, pursuing a personal health goal or seeking connection with a community of inspiring women. Every stride tells a story of courage and determination. We honor the strength and spirit of women who run and support each other every step of the way.
    </p>
  </div>

  <!-- Runner Stories Grid -->
  <div class="max-w-7xl mx-auto">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" style="grid-auto-rows: minmax(auto, auto);">
      {
        runnerStories.map((runner, index) => {
          const initials = runner.data.title.split(' ').map((n: string) => n[0]).join('');
          const cardId = `card-${index}`;
          return (
            <div 
              id={cardId}
              class="runner-card glass rounded-lg overflow-hidden hover:shadow-xl transition-all duration-500 cursor-pointer transform"
              data-card-id={cardId}
            >
                             <!-- Runner Photo -->
               <div class="relative h-64 bg-gradient-to-br from-lightgreen-txt-p to-lightgreen-txt-s transition-all duration-700">
                 <div class="absolute inset-0 flex items-center justify-center">
                   <div class="w-32 h-32 bg-[rgb(246,242,232)] rounded-full flex items-center justify-center shadow-lg transition-all duration-700">
                     <span class="text-4xl font-bold text-lightgreen-txt-p transition-all duration-700">
                       {initials}
                     </span>
                   </div>
                 </div>
               </div>
               
               <!-- Runner Info -->
               <div class="p-6 transition-all duration-700">
                <h3 class="text-xl text-glass-txt-p font-bold mb-2">{runner.data.title}</h3>
                <p class="text-sm text-glass-txt-p font-semibold mb-3">{runner.data.pronouns}</p>
                                 <p class="leading-relaxed text-glass-txt-p line-clamp-4">
                   {runner.body}
                 </p>
                <button class="mt-4 text-lightgreen-txt-p font-semibold hover:text-lightgreen-txt-s transition-colors duration-200">
                  Read Full Story →
                </button>
              </div>
            </div>
          );
        })
      }
         </div>
   </div>

           
 </HeroLayoutWithHTML>

<!-- Pass runner data to JavaScript -->
<script id="runner-data" type="application/json" set:html={JSON.stringify(runnerStories.map(runner => ({
  title: runner.data.title,
  pronouns: runner.data.pronouns,
  story: runner.body  // ← This is the markdown content from the .md file body
})))}></script>

<!-- Lightbox Overlay - Positioned outside HeroLayoutWithHTML to overlay entire page -->
<div id="lightbox" class="lightbox">
  <div class="lightbox-content">
   <button class="lightbox-close">&times;</button>
   <div class="lightbox-header">
     <div class="lightbox-avatar">
       <span id="lightbox-initials"></span>
     </div>
     <div class="lightbox-info">
       <h3 id="lightbox-name"></h3>
       <p id="lightbox-pronouns"></p>
     </div>
   </div>
       <div class="lightbox-body">
      <div id="lightbox-story"></div>  <!-- ← This is where the markdown content goes -->
    </div>
 </div>
</div>

<style>
  .line-clamp-4 {
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
     .runner-card {
     transition: all 0.3s ease;
     margin: 0.5rem;
   }
   
   /* Enhanced hover effects */
   .runner-card:hover {
     transform: translateY(-2px);
     box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
   }
   
                                                               /* Lightbox Styles */
       .lightbox {
         position: fixed;
         top: 0;
         left: 0;
         width: 100vw;
         height: 100vh;
         z-index: 9999;
         display: none;
         align-items: center;
         justify-content: center;
         background: rgba(0, 0, 0, 0.8);
         backdrop-filter: blur(4px);
       }
    
    .lightbox.show {
      display: flex;
    }
    
         .lightbox-content {
       background: var(--color-light-bg-s);
       border-radius: 12px;
       max-width: 600px;
       width: 90%;
       max-height: 80vh;
       overflow-y: auto;
       box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
       position: relative;
       animation: lightboxSlideIn 0.3s ease-out;
     }
    
    @keyframes lightboxSlideIn {
      from {
        opacity: 0;
        transform: scale(0.8);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }
   
                               .lightbox-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        font-size: 2rem;
        color: var(--color-bg-p);
        cursor: pointer;
        z-index: 10;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
      }
      
      .lightbox-close:hover {
        background: rgba(43, 70, 60, 0.1);
        color: var(--color-bg-p);
      }
   
   .lightbox-header {
     display: flex;
     align-items: center;
     gap: 1.5rem;
     padding: 2rem 2rem 1rem 2rem;
     border-bottom: 1px solid rgba(0, 0, 0, 0.1);
   }
   
       .lightbox-avatar {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, var(--color-bg-p), var(--color-bg-p));
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .lightbox-avatar span {
      font-size: 2rem;
      font-weight: bold;
      color: var(--color-light-bg-s);
    }
   
                               .lightbox-info h3 {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--color-bg-p);
        margin: 0 0 0.5rem 0;
      }
      
      .lightbox-info p {
        margin: 0.25rem 0;
        color: var(--color-bg-p);
        font-size: 0.9rem;
      }
      
      .lightbox-info p:first-of-type {
        font-weight: 600;
        color: var(--color-bg-p);
      }
   
   .lightbox-body {
     padding: 1.5rem 2rem 2rem 2rem;
     color: var(--color-bg-p)
   }
   
   .lightbox-body p {
     line-height: 1.7;
     color: var(--color-bg-p);
     font-size: 1rem;
     margin: 0 0 1rem 0;
   }
   
   .lightbox-body p:last-child {
     margin-bottom: 0;
   }
   
   .lightbox-body strong {
     font-weight: 600;
     color: var(--color-bg-p);
   }
   
   .lightbox-body em {
     font-style: italic;
   }
   
   @media (max-width: 768px) {
     .lightbox-content {
       width: 95%;
       max-height: 90vh;
     }
     
     .lightbox-header {
       flex-direction: column;
       text-align: center;
       gap: 1rem;
       padding: 1.5rem 1.5rem 1rem 1.5rem;
     }
     
     .lightbox-body {
       padding: 1rem 1.5rem 1.5rem 1.5rem;
     }
   }
</style>

<script is:inline>
  // Lightbox functionality - runs on every page visit
  (function() {
    // Wait for DOM to be ready
    function initLightbox() {
      const cards = document.querySelectorAll('.runner-card');
      const lightbox = document.getElementById('lightbox');
      const lightboxClose = document.querySelector('.lightbox-close');
      
      if (!cards.length || !lightbox || !lightboxClose) {
        // If elements aren't ready yet, try again in a moment
        setTimeout(initLightbox, 100);
        return;
      }
      
             // Runner data for the lightbox - this will be populated from the server-side data
       const runners = JSON.parse(document.getElementById('runner-data')?.textContent || '[]');
       
       // Simple markdown to HTML converter
       function convertMarkdownToHtml(markdown) {
         return markdown
           // Convert **text** to <strong>text</strong>
           .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
           // Convert *text* to <em>text</em>
           .replace(/\*(.*?)\*/g, '<em>$1</em>')
           // Convert line breaks to <br> tags
           .replace(/\n/g, '<br>')
           // Convert double line breaks to paragraph breaks
           .replace(/<br><br>/g, '</p><p>')
           // Wrap in paragraph tags
           .replace(/^(.+)$/s, '<p>$1</p>')
           // Clean up empty paragraphs
           .replace(/<p><\/p>/g, '');
       }
       
       function openLightbox(index) {
         const runner = runners[index];
         const initials = runner.title.split(' ').map(n => n[0]).join('');
         
         // Populate lightbox content
         document.getElementById('lightbox-initials').textContent = initials;
         document.getElementById('lightbox-name').textContent = runner.title;
         document.getElementById('lightbox-pronouns').textContent = runner.pronouns;
         
         // Convert markdown to HTML for the story
         const storyHtml = convertMarkdownToHtml(runner.story);
         document.getElementById('lightbox-story').innerHTML = storyHtml;
        
        // Show lightbox
        lightbox.classList.add('show');
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
      }
      
      function closeLightbox() {
        lightbox.classList.remove('show');
        document.body.style.overflow = '';
      }
      
      // Remove any existing event listeners by cloning and replacing elements
      cards.forEach((card, index) => {
        const newCard = card.cloneNode(true);
        card.parentNode.replaceChild(newCard, card);
        
        newCard.addEventListener('click', function() {
          openLightbox(index);
        });
      });
      
      // Close lightbox on close button click
      lightboxClose.addEventListener('click', closeLightbox);
      
      // Close lightbox on background click
      lightbox.addEventListener('click', function(e) {
        if (e.target === lightbox) {
          closeLightbox();
        }
      });
      
      // Close lightbox on escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && lightbox.classList.contains('show')) {
          closeLightbox();
        }
      });
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initLightbox);
    } else {
      initLightbox();
    }
    
    // Also initialize on Astro page transitions
    document.addEventListener('astro:page-load', initLightbox);
  })();
</script> 