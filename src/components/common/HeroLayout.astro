---
import { render } from "astro:content";
import type { CommunityEntry, AboutEntry, BlogEntry, RecipeEntry, GetInvolvedEntry } from "@/types";
import BaseLayout from "@components/base/BaseLayout.astro";
import TableOfContents from "@components/common/TableOfContents.astro";

interface Props {
  entry: CommunityEntry | AboutEntry | BlogEntry | RecipeEntry | GetInvolvedEntry;
  heroImage?: any; // Astro image import
  heroImageAlt?: string;
  contentClass?: string;
  heroTextClass?: string;
  heroOverlayOpacity?: number;
  heroMinHeight?: string;
  showSideMenu?: boolean;
}

const { 
  entry, 
  heroImage, 
  heroImageAlt = "Hero background", 
  contentClass = "content-lightgreen",
  heroTextClass = "text-white",
  heroOverlayOpacity = 60,
  heroMinHeight = "min-h-screen",
  showSideMenu = false
} = Astro.props;

const { title, description, image, imageAlt } = entry.data;
const { Content, headings } = await render(entry);

const tocDepth = 3; // maximum depth for the table of contents 1 = h1, etc
const hasToc = showSideMenu && headings.filter((heading) => heading.depth <= tocDepth).length > 0;
---

<BaseLayout 
  title={title} 
  description={description} 
  image={image?.src}
>
  <!-- Hero Section with Background Image -->
  <section class={`relative ${heroMinHeight} flex items-center justify-center overflow-hidden -mt-4`}>
    <!-- Background Image -->
    {heroImage && (
      <div class="absolute inset-0 z-0 bg-cover bg-center bg-no-repeat" style={`background-image: url(${heroImage.src});`}>
        <!-- Overlay for better text readability -->
        <div class={`absolute inset-0 bg-black bg-opacity-${heroOverlayOpacity}`}></div>
      </div>
    )}
    
    <!-- Hero Content -->
    <div class="relative z-10 container">
      <div class="row justify-center">
        <div class="text-center lg:col-8">
          <div class={heroTextClass}>
            <h1 class="mb-4 text-4xl md:text-6xl font-bold drop-shadow-lg">
              {title}
            </h1>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Content Section -->
  <section class="section py-16">
    <div class="container">
      <div class="flex">
        <div class={`w-full ${hasToc ? 'md:w-3/4 lg:w-4/5' : 'w-full'}`}>
          <div class={contentClass}>
            <Content />
          </div>
        </div>
        {hasToc && (
          <div class="hidden lg:flex lg:w-1/5 max-h-static_sidemenu sticky top-[5rem] ml-4">
            <TableOfContents headings={headings} tocDepth={tocDepth} />
          </div>
        )}
      </div>
    </div>
  </section>
</BaseLayout> 