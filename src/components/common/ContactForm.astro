---
interface Props {
  title?: string;
  subtitle?: string;
  submitButtonText?: string;
  successMessage?: string;
  errorMessage?: string;
  formId?: string;
  className?: string;
}

const {
  title = "Contact Us",
  subtitle = "We'd love to hear from you!",
  submitButtonText = "Send Message",
  successMessage = "Thank you for your message! We'll get back to you soon.",
  errorMessage = "Sorry, there was an error submitting your form. Please try again later.",
  formId = "contact-form",
  className = ""
} = Astro.props;
---

<div class={`contact-form-container ${className}`}>
  <div class="max-w-md mx-auto">
    {title && <h3 class="text-2xl font-bold text-txt-p mb-2">{title}</h3>}
    {subtitle && <p class="text-txt-s mb-6">{subtitle}</p>}
    
    <form id={formId} class="space-y-6" data-success-message={successMessage} data-error-message={errorMessage} data-form-id={formId}>
      <!-- Honeypot field - hidden from users but visible to bots -->
      <div style="position: absolute; left: -9999px; opacity: 0; pointer-events: none;">
        <input 
          type="text" 
          name="website" 
          tabindex="-1" 
          autocomplete="off" 
          aria-hidden="true"
        />
      </div>
      
      <!-- Name field -->
      <div>
        <label for={`${formId}-name`} class="block font-semibold text-base mb-2 text-txt-p">
          Full Name *
        </label>
        <input 
          type="text" 
          id={`${formId}-name`}
          name="name" 
          required 
          class="contact-form-input"
          placeholder="Enter your full name"
        />
      </div>
      
      <!-- Email field -->
      <div>
        <label for={`${formId}-email`} class="block text-base font-semibold text-txt-p mb-2">
          Email Address *
        </label>
        <input 
          type="email" 
          id={`${formId}-email`}
          name="email" 
          required 
          class="contact-form-input"
          placeholder="Enter your email address"
        />
      </div>
      
      <!-- Message field -->
      <div>
        <label for={`${formId}-message`} class="block text-base font-semibold text-txt-p mb-2">
          Message *
        </label>
        <textarea 
          id={`${formId}-message`}
          name="message" 
          rows="5" 
          required 
          class="contact-form-textarea"
          placeholder="Tell us how we can help you..."
        ></textarea>
      </div>
      
      <!-- reCAPTCHA -->
      <!-- <div class="g-recaptcha" data-sitekey="6LcwsqcrAAAAAORjq69IIyTJW3uD2ZUxScZnUPnO"></div> -->
      
      <!-- Submit button -->
      <button 
        type="submit" 
        class="contact-form-button"
      >
        {submitButtonText}
      </button>
    </form>
    
    <!-- Status messages -->
    <div id={`${formId}-status`} class="mt-6 hidden">
      <div id={`${formId}-success`} class="contact-form-success hidden">
        {successMessage}
      </div>
      <div id={`${formId}-error`} class="contact-form-error hidden">
        {errorMessage}
      </div>
    </div>
  </div>
</div>

<!-- reCAPTCHA script -->
<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<script>
  // Form submission handler
  function initializeForm(formId: string) {
    console.log('üîß Initializing form with ID:', formId);
    const form = document.getElementById(formId) as HTMLFormElement;
    if (!form) {
      console.error('‚ùå Form not found with ID:', formId);
      return;
    }
    console.log('‚úÖ Form found:', form);
    
    const statusDiv = document.getElementById(`${formId}-status`);
    const successDiv = document.getElementById(`${formId}-success`);
    const errorDiv = document.getElementById(`${formId}-error`);
    
    function showMessage(type: string, message: string) {
      console.log('üì¢ Showing message:', type, message);
      
      if (statusDiv) {
        statusDiv.classList.remove('hidden');
        console.log('‚úÖ Status div shown');
      }
      
      if (successDiv) successDiv.classList.add('hidden');
      if (errorDiv) errorDiv.classList.add('hidden');
      
      if (type === 'success') {
        if (successDiv) {
          successDiv.classList.remove('hidden');
          successDiv.textContent = message;
          console.log('‚úÖ Success message shown:', message);
        }
      } else {
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = message;
          console.log('‚ùå Error message shown:', message);
        }
      }
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        if (statusDiv) statusDiv.classList.add('hidden');
        console.log('‚è∞ Auto-hiding messages');
      }, 5000);
    }
    
    function resetForm() {
      form.reset();
      // grecaptcha.reset(); // Commented out for now
    }
    
    // Rate limiting check
    function isRateLimited() {
      //Commented out for testing
      // const lastSubmission = localStorage.getItem(`${formId}-last-submission`);
      // if (lastSubmission) {
      //   const timeDiff = Date.now() - parseInt(lastSubmission);
      //   const oneHour = 60 * 60 * 1000; // 1 hour in milliseconds
      //   if (timeDiff < oneHour) {
      //     return true;
      //   }
      // }
      return false;
    }
    
    // Content filtering
    function isSpam(data: any) {
      const spamKeywords = [
        'viagra', 'casino', 'loan', 'click here', 'buy now', 'make money fast',
        'weight loss', 'diet pills', 'free money', 'lottery', 'inheritance',
        'nigerian prince', 'urgent', 'limited time', 'act now'
      ];
      
      const message = data.message.toLowerCase();
      const name = data.name.toLowerCase();
      
      // Check for spam keywords
      if (spamKeywords.some(keyword => message.includes(keyword) || name.includes(keyword))) {
        return true;
      }
      
      // Check for excessive links
      const linkCount = (message.match(/http/g) || []).length;
      if (linkCount > 3) {
        return true;
      }
      
      // Check for excessive caps
      const capsRatio = (message.match(/[A-Z]/g) || []).length / message.length;
      if (capsRatio > 0.7) {
        return true;
      }
      
      // Check for suspicious email patterns
      const suspiciousEmails = ['test@test.com', 'admin@admin.com', 'user@example.com'];
      if (suspiciousEmails.includes(data.email.toLowerCase())) {
        return true;
      }
      
      return false;
    }
    
    // Email validation
    function validateEmail(email: string) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
    
    form.addEventListener('submit', async (e) => {
      console.log('üìù Form submit event triggered!');
      e.preventDefault();
      
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      if (!submitButton) return;
      
      const originalText = submitButton.textContent || '';
      
      // Show loading state
      submitButton.textContent = 'Sending...';
      submitButton.disabled = true;
      
      try {
        // Check rate limiting
        if (isRateLimited()) {
          throw new Error('Please wait at least 1 hour between submissions');
        }
        
        const formData = new FormData(form);
        
        // Check honeypot field
        if (formData.get('website')) {
          console.log('Bot detected via honeypot');
          throw new Error('Invalid submission detected');
        }
        
        // // Verify reCAPTCHA
        // const recaptchaResponse = grecaptcha.getResponse();
        // if (!recaptchaResponse) {
        //   throw new Error('Please complete the reCAPTCHA verification');
        // }
        
        const data = {
          name: formData.get('name') as string,
          email: formData.get('email') as string,
          message: formData.get('message') as string,
          formId: formId, // Include the form ID for sheet separation
          // recaptchaResponse: recaptchaResponse,
          timestamp: new Date().toISOString(),
          userAgent: navigator.userAgent,
          referrer: document.referrer
        };
        
        // Validate email
        if (!validateEmail(data.email)) {
          throw new Error('Please enter a valid email address');
        }
        
        // Check for spam
        if (isSpam(data)) {
          throw new Error('Message flagged as spam');
        }
        
        // Submit to Google Apps Script
        const scriptUrl = 'https://script.google.com/macros/s/AKfycbxjxKuCpTzhs2WwuaV8SpFWaZXIgQXxvrKdytsdJit3JOHRVq2qI8JB-14iJn66Z5Gc/exec';
        
        console.log('üì§ Submitting form data:', data);
        console.log('üåê Script URL:', scriptUrl);
        
        const response = await fetch(scriptUrl, {
          method: 'POST',
          body: JSON.stringify(data),
        });
        
        console.log('üì° Response status:', response.status);
        console.log('üì° Response headers:', response.headers);
        
        const result = await response.json();
        console.log('üì• Response result:', result);
        
        if (result.success) {
          const successMsg = form.dataset.successMessage || 'Message sent successfully!';
          showMessage('success', successMsg);
          resetForm();
          
          // Update rate limiting
          localStorage.setItem(`${formId}-last-submission`, Date.now().toString());
        } else {
          throw new Error(result.error || 'Submission failed');
        }
        
      } catch (error: any) {
        console.error('Form submission error:', error);
        const errorMsg = 'Sorry, there was an error submitting your form. Please try again later.';
        showMessage('error', errorMsg);
      } finally {
        // Reset button state
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    });
  }
  
  // Initialize form when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Find the contact form and get its ID
    const form = document.querySelector('form[data-form-id]');
    if (form) {
      const formId = form.getAttribute('data-form-id');
      console.log('üöÄ DOM loaded, initializing form with ID:', formId);
      if (formId) {
        initializeForm(formId);
      }
    } else {
      console.error('‚ùå No contact form found with data-form-id attribute');
    }
  });
</script>

<style>
  .contact-form-container {
    font-family: 'Quicksand', sans-serif;
  }
  
  /* Input and textarea styling - Use theme colors */
  .contact-form-container .contact-form-input,
  .contact-form-container .contact-form-textarea {
    width: 100%;
    padding: 12px 16px;
    border: 3px solid var(--color-border);
    border-radius: 8px;
    font-size: 16px;
    background-color: var(--color-bg-s);
    color: var(--color-glass-txt-p);
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    transition: border-color 0.3s ease;
  }
  
  .contact-form-container .contact-form-input:focus,
  .contact-form-container .contact-form-textarea:focus {
    outline: none;
    border-color: var(--color-txt-p);
  }
  
  .contact-form-container .contact-form-textarea {
    resize: vertical;
    min-height: 120px;
  }
  
  /* Button styling - Use theme colors */
  .contact-form-container .contact-form-button {
    width: 100%;
    padding: 16px 24px;
    border: none;
    border-radius: 8px;
    font-size: 18px;
    font-weight: 600;
    cursor: pointer;
    background-color: var(--color-txt-p);
    color: var(--color-bg-p);
    transition: opacity 0.3s ease;
  }
  
  .contact-form-container .contact-form-button:hover {
    opacity: 0.8;
  }
  
  .contact-form-container .contact-form-button:focus {
    outline: none;
  }
  
  .contact-form-container .contact-form-button:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
  
  /* Status message styling - Use theme colors */
  .contact-form-container .contact-form-success {
    padding: 16px;
    border: 3px solid;
    border-radius: 8px;
    font-weight: 600;
    text-align: center;
    margin-top: 16px;
    font-size: 16px;
    background-color: rgba(212, 237, 218, 0.9);
    border-color: rgba(195, 230, 203, 0.9);
    color: #155724;
  }
  
  .contact-form-container .contact-form-error {
    padding: 16px;
    border: 3px solid;
    border-radius: 8px;
    font-weight: 600;
    text-align: center;
    margin-top: 16px;
    font-size: 16px;
    background-color: rgba(248, 215, 218, 0.9);
    border-color: rgba(245, 198, 203, 0.9);
    color: #721c24;
  }
  
  /* Hide honeypot field */
  .contact-form-container input[name="website"] {
    display: none;
  }
  
  /* Labels - Use theme colors */
  .contact-form-container label {
    font-weight: 600;
    font-size: 16px;
    margin-bottom: 8px;
    display: block;
    color: var(--color-txt-p);
  }
  
  /* Ensure placeholder text uses theme colors for visibility */
  .contact-form-container .contact-form-input::placeholder,
  .contact-form-container .contact-form-textarea::placeholder {
    color: var(--color-glass-txt-p);
    opacity: 1;
  }
  
  /* Light theme overrides - Target html element */
  html.light .contact-form-container .contact-form-input,
  html.light .contact-form-container .contact-form-textarea {
    border-color: var(--color-light-border);
    background-color: var(--color-light-bg-s);
    color: var(--color-light-glass-txt-p);
  }
  
  html.light .contact-form-container .contact-form-input:focus,
  html.light .contact-form-container .contact-form-textarea:focus {
    border-color: var(--color-light-txt-p);
  }
  
  html.light .contact-form-container .contact-form-button {
    background-color: var(--color-light-txt-p);
    color: var(--color-light-bg-p);
  }
  
  html.light .contact-form-container label {
    color: var(--color-light-txt-p);
  }
  
  html.light .contact-form-container .contact-form-input::placeholder,
  html.light .contact-form-container .contact-form-textarea::placeholder {
    color: var(--color-light-glass-txt-p);
  }
  
  /* Nature theme overrides - Target html element */
  html.theme-nature .contact-form-container .contact-form-input,
  html.theme-nature .contact-form-container .contact-form-textarea {
    border-color: var(--color-nature-border);
    background-color: var(--color-nature-bg-s);
    color: var(--color-nature-glass-txt-p);
  }
  
  html.theme-nature .contact-form-container .contact-form-input:focus,
  html.theme-nature .contact-form-container .contact-form-textarea:focus {
    border-color: var(--color-nature-txt-p);
  }
  
  html.theme-nature .contact-form-container .contact-form-button {
    background-color: var(--color-nature-txt-p);
    color: var(--color-nature-bg-p);
  }
  
  html.theme-nature .contact-form-container label {
    color: var(--color-nature-txt-p);
  }
  
  html.theme-nature .contact-form-container .contact-form-input::placeholder,
  html.theme-nature .contact-form-container .contact-form-textarea::placeholder {
    color: var(--color-nature-glass-txt-p);
  }
</style>
